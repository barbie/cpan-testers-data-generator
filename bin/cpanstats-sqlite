#!/usr/bin/perl
use strict;
$|++;

my $VERSION = '0.01';

#----------------------------------------------------------------------------

=head1 NAME

cpanstats-update - script to update entries in the cpanstats database.

=head1 SYNOPSIS

  perl cpanstats-sqlite                 \
     --config=<file>                    \
     [-i=0] [--file=<file>]

=head1 DESCRIPTION

This program updates the SQLite version of the cpanstats database from the
MySQL version. If a single id, or file of ids are provided, these specific
ids only are updated, otherwise all the latest records will be updated.

=head1 OPTIONS

=over 4

=item --config

Configuration file contain database access details.

=item -i | --id

Display the record matching the given cpanstats id.

=item --file

The named file will be used to retrieve a list of cpanstats ids, one per
line.

=back

=cut

# -------------------------------------
# Library Modules

use Config::IniFiles;
use CPAN::Testers::Common::DBUtils;
use Getopt::ArgvFile default=>1;
use Getopt::Long;
use IO::File;

# -------------------------------------
# Variables

my (%options,@rows);

my %SQL = (
    'SelectMax'     => 'SELECT MAX(id) FROM cpanstats',
    'SelectNew'     => 'SELECT id,guid,state,postdate,tester,dist,version,platform,perl,osname,osvers,fulldate,type FROM cpanstats WHERE id > ?',
    'SelectByID'    => 'SELECT id,guid,state,postdate,tester,dist,version,platform,perl,osname,osvers,fulldate,type FROM cpanstats WHERE id = ?',
    'Replace'       => 'REPLACE INTO cpanstats (id,guid,state,postdate,tester,dist,version,platform,perl,osname,osvers,fulldate,type) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',
    'Insert'        => 'INSERT INTO cpanstats (id,guid,state,postdate,tester,dist,version,platform,perl,osname,osvers,fulldate,type) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',
);

# -------------------------------------
# Program

##### INITIALISE #####

init_options();

##### MAIN #####

if($options{id} || $options{file}) {

    my @list = get_list();
    push @list, {id=>$options{id}}    if($options{id});

    for my $item (@list) {
        my @rows = $options{CPANSTATS}->get_query('array',$SQL{SelectByID},$item->{id});
        next    unless(@rows);
        $options{LITESTATS}->do_query($SQL{Replace},@{$rows[0]});
    }

} else {

    my @rows = $options{LITESTATS}->get_query('array',$SQL{SelectMax});
    my $id = @rows ? $rows[0]->[0] : 0;
    my $next = $options{CPANSTATS}->iterator('array',$SQL{SelectNew},$id);
    while(my $row = $next->()) {
        $options{LITESTATS}->do_query($SQL{Insert},@$row);
    }

}

# -------------------------------------
# Subroutines

=item get_list

Returns the list of cpanstats ids from the named file.

=cut

sub get_list {
    my @list;
    my $file = $options{file} || return ();
    die "file [$file] not found"        unless(-f $file);

    my $fh = IO::File->new($file)       or die "Cannot open file [$file]: $!";
    while(<$fh>) {
        next    if(/^\s*$/);    # ignore empty lines
        s/\s+$//;
        push @list, {id=>$_} if($_);
    }
    $fh->close;

    return @list;
}

=item init_options

Determine command line options and initialise any defaults.

=cut

sub init_options {
    GetOptions( \%options,
        'config=s',
        'id|i=i',
        'file=s',
        'help|h',
        'version|v'
    );

    help(1) if($options{help});
    help(0) if($options{version});

    help(1,"Must specify the configuration file")               unless(   $options{config});
    help(1,"Configuration file [$options{config}] not found")   unless(-f $options{config});

    # load configuration
    my $cfg = Config::IniFiles->new( -file => $options{config} );

    # configure databases
    for my $db (qw(CPANSTATS LITESTATS)) {
        die "No configuration for $db database\n"   unless($cfg->SectionExists($db));
        my %opts = map {$_ => $cfg->val($db,$_);} qw(driver database dbfile dbhost dbport dbuser dbpass);
        $options{$db} = CPAN::Testers::Common::DBUtils->new(%opts);
        die "Cannot configure $db database\n" unless($options{$db});
    }
}

sub help {
    my ($full,$mess) = @_;

    print "\n$mess\n\n" if($mess);

    if($full) {
        print <<HERE;

Usage: $0
     --config=<file>                - configuration file

    [--id=<num>]                    - refresh this id
    [--file=<file>]                 - refresh these ids (1 per line)

    [--help|-h]                     - this screen
    [--Version|-v]                  - program version

HERE

    }

    print "$0 v$VERSION\n";
    exit(0);
}

__END__

=back

=head1 BUGS, PATCHES & FIXES

There are no known bugs at the time of this release. However, if you spot a
bug or are experiencing difficulties, that is not explained within the POD
documentation, please send bug reports and patches to the RT Queue (see below).

Fixes are dependent upon their severity and my availability. Should a fix not
be forthcoming, please feel free to (politely) remind me.

RT Queue -
http://rt.cpan.org/Public/Dist/Display.html?Name=CPAN-Testers-Data-Generator

=head1 SEE ALSO

L<CPAN::Testers::WWW::Reports>,
L<CPAN::Testers::WWW::Statistics>

F<http://www.cpantesters.org/>,
F<http://stats.cpantesters.org/>,
F<http://wiki.cpantesters.org/>

=head1 AUTHOR

  Barbie, <barbie@cpan.org>
  for Miss Barbell Productions <http://www.missbarbell.co.uk>.

=head1 COPYRIGHT AND LICENSE

  Copyright (C) 2012 Barbie for Miss Barbell Productions.

  This module is free software; you can redistribute it and/or
  modify it under the same terms as Perl itself.

=cut
